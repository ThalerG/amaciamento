clear; close all;

load('EnDataA_Dissertacao.mat');

% Tempo mínimo e máximo para avaliação dos ensaios
tempoMin = 1;
tempoMaxA = 20;
tempoMaxB = 40;

cortaEnsaios;

EnData = EnDataA; 

clear EnDataA;

rt = 'D:\Documentos\Amaciamento\'; % Root folder
% rt = 'C:\Users\FEESC\Desktop\Amaciamento\'; % Root folder

% Create new folder for generated files
c = clock;

%% Preparação dos conjuntos

% conjVal = [1,1;4,2;5,3]; % Ensaios reservados para conjunto de validação [Amostra, ensaio]
% conjVal = 20;
% conjVal = [];
conjVal = [4,1]; % Ensaios reservados para conjunto de validação [Amostra, ensaio]

descarte = [4,3;4,2];
% descarte = [];

if ~isempty(descarte)
    for k = 1:length(descarte(:,1))
        EnData{descarte(k,1)}(descarte(k,2)) = [];
    end
end

% Tempos de amaciamento esperados:

loadTempoAmacAPopular;
% loadTempoAmacAConservador;
% loadTempoAmacBPopular;
% loadTempoAmacBConservador;

%% Parâmetros de busca
% Opções de métrica de desempenho:
% ROC_AUC -> Área abaixo da curva ROC 
% FselBeta -> F-score para dado valor de selBeta Bx,Ax] = ndgrid(1:numel(A),1:numel(A));
% MCC - > Coeficiente de correlação de Matthews

selMethod = 'MCC';

selBeta = 1; % Valor de selBeta caso o método seja F-selBeta

wMax = 3.02; % Duração máxima da janela [h]

% vars = {'cRMS', 'cKur', 'cVar', 'vInfRMS', 'vInfKur', 'vInfVar', 'vSupRMS', 'vSupKur', 'vSupVar', 'vaz'}; % Variáveis utilizadas
vars = {'cRMS', 'cKur', 'cVar', 'vaz'}; % Variáveis utilizadas
standardize = true;

%%%%%%%%%%%%%%% Teste T: %%%%%%%%%%%%%%

N = 2:100; % Sample window for linear regression
M = [1, 5, 10:10:180]; % Janela da média móvel
D = [1:2:5, 10:10:90, 100:20:180]; % Distância entre amostras da regressão
ALPHA = 0:0.001:1; % Significance level

%%%%%%%%%%%%%%% Diferença espaçada: %%%%%%%%%%%%%%

S = 1e-4:1e-4:5e-2; % Maximum tolerated difference

%%%%%%%%%%%%%%% Oversampling: %%%%%%%%%%%%%%

% "none"
% "SMOTE"
% "ADASYN"
% "Borderline SMOTE"
% "Safe-level SMOTE"
% "RandomUndersampling"

% paramOvers = {method,% of new samples,k neighbors, standardize}
paramOvers = {'SMOTE+RU', 200, 5, false};

%% Pasta e arquivos

% Cria pasta para análise
fsave = [rt 'Ferramentas\Arquivos Gerados\Dissertacao_ModeloAPop_Teste8020_RU+SMOTE\classification_Statistics_' num2str(c(1)-2000) num2str(c(2),'%02d') num2str(c(3),'%02d') '_' num2str(c(4),'%02d') num2str(c(5),'%02d') '\'];
mkdir(fsave); clear rt c;

%% Teste t

fsave_tTest = [fsave,'teste_t\'];

mkdir(fsave_tTest);

numIt = nnz(((N-1)'.*D/60)<=wMax)*length(M);

cstart = clock;

ppm = ParforProgressbar(numIt, 'progressBarUpdatePeriod', 5);

tTest.N = NaN; tTest.M = NaN; tTest.D = NaN; tTest.Alpha = NaN; tTest.Var = ""; 
tTest.ROC_AUC_Train = NaN; tTest.fselBeta_Train = NaN; tTest.MMC_Train = NaN; tTest.time_Train = NaN;
tTest.ROC_AUC_Test = NaN; tTest.fselBeta_Test = NaN; tTest.MMC_Test = NaN;

lenN = length(N); lenM = length(M); lenD = length(D); lenV = length(Var); lenALPHA = length(Alpha);

tTestAn = repmat(tTest, lenN, lenM, lenD, lenV, lenALPHA);

if numel(conjVal) == 1
    indTest = cell(lenN,lenM,lenD, lenV, lenALPHA);
end

clear tTest;

parfor n = 1:lenN
% for n = 1:lenN
    for m = 1:lenM
        for d = 1:lenD
            for v = 1:lenV
             tTestAn(n,m,d,v,a).N = N(n);
             tTestAn(n,m,d,v,a).M = M(m);
             tTestAn(n,m,d,v,a).D = D(d);
             tTestAn(n,m,d,v,a).Var = vars(v);
             
             
             if ((N(n)-1)*D(d)/60)>wMax
                 continue
             end
             
             if numel(conjVal) == 1
                [Ttrain,Xtrain,Ytrain,Xtest,Ytest,indTest{n,m,d}] = preproc_data(EnData,tEst,conjVal,N(n),M(m),D(d),Inf,vars,paramOvers,standardize);
             else
                [Ttrain,Xtrain,Ytrain,Xtest,Ytest] = preproc_data(EnData,tEst,conjVal,N(n),M(m),D(d),Inf,vars,paramOvers,standardize);
             end
             
             [trainedClassifier,predictTrain,scoreTrain,timeTrain] = train_ML(Ttrain, methodSt, kFold, paramML);
             tTestAn(n,m,d).time_Train = timeTrain;
             
             for a = 1:lenALPHA
                 tTestAn(n,m,d,v,a).Alpha = ALPHA(a);
                 [predictTest,scoreTest] = trainedClassifier.predict(Xtest);
                 [tTestAn(n,m,d,v,a).ROC_AUC_Train, tTestAn(n,m,d,v,a).fselBeta_Train, tTestAn(n,m,d,v,a).MMC_Train] = performanceMetrics(double(Ytrain), predictTrain, scoreTrain, selBeta);
                 [tTestAn(n,m,d,v,a).ROC_AUC_Test, tTestAn(n,m,d,v,a).fselBeta_Test, tTestAn(n,m,d,v,a).MMC_Test] = performanceMetrics(double(Ytest), predictTest, scoreTest, selBeta);
             end
             
             
             tTestAn(n,m,d,v,:).ROC_AUC_Train =;
             tTestAn(n,m,d,v,:).ROC_AUC_Test =;
             
             ppm.increment();
        end
    end
end

delete(ppm);

cend = clock;
cel = etime(cend,cstart); cdur(1) = floor(cel/(3600)); cdur(2) = floor(rem(cel,(3600))/60); cdur(3) = rem(cel,60);

preproc_graph;

tTestAn = reshape(tTestAn,[],1);
tTestAn(isnan([tTestAn(:).ROC_AUC_Train]')) = [];
preProcAnTable = struct2table(tTestAn);

save([fsave_tTest 'results_rawMatrix'],'tTestAn');

switch selMethod % Rankeia os resultados pela métrica selecionada
    case 'ROC_AUC'
        preProcAnTable = sortrows(preProcAnTable,'ROC_AUC_Train','descend');
    case 'Fbeta'
        preProcAnTable = sortrows(preProcAnTable,'fselBeta_Train','descend');
    case 'MCC'
        preProcAnTable = sortrows(preProcAnTable,'MMC_Train','descend');
    otherwise
        error(['Performance metric "', selMethod,'" not recognized'])
end

save([fsave_tTest 'parameters'],'D','N','M','selMethod','selBeta');
save([fsave_tTest 'results_rankedTable'],'preProcAnTable');


if numel(conjVal) == 1
    conjVal = indTest{N == preProcAnTable.N(1),M == preProcAnTable.M(1), D == preProcAnTable.D(1)};
end

N = preProcAnTable.N(1);
M = preProcAnTable.M(1);
D = preProcAnTable.D(1);

preproc_printEnd;

clear preProcAnTable preProcAn cel cend cstart numIt

%% Análise de features

fsave_featSel = [fsave,'analise_featureSelection\'];

mkdir(fsave_featSel);

cstart = clock;

featsel_printStart;

switch FSmethod
    case 'hex_none'
        featsel_hex_none; % Poda extensiva de grandezas
    case 'hgr_none'
        featsel_hgr_none; % Poda greedy de grandezas
    case 'none'
        % Não faz nada
    otherwise
        switch FSmethod(1:4)
            case 'hex_'
                featsel_hex_ranked; % Poda extensiva de grandezas com features filtradas
            case 'hgr_'
                featsel_hgr_ranked; % Poda greedy de grandezas com features filtradas
            otherwise
                featsel_ranked; % Features filtradas
        end
end

cend = clock;
cel = etime(cend,cstart); cdur(1) = floor(cel/(3600)); cdur(2) = floor(rem(cel,(3600))/60); cdur(3) = rem(cel,60);

featSelAn = reshape(featSelAn,[],1);
featSelAn(isnan([featSelAn(:).ROC_AUC_Train]')) = [];
featSelAnTable = struct2table(featSelAn);

save([fsave_featSel 'results_rawMatrix'],'featSelAn');

switch selMethod % Rankeia os resultados pela métrica selecionada
    case 'ROC_AUC'
        featSelAnTable = sortrows(featSelAnTable,'ROC_AUC_Train','descend');
    case 'Fbeta'
        featSelAnTable = sortrows(featSelAnTable,'fselBeta_Train','descend');
    case 'MCC'
        featSelAnTable = sortrows(featSelAnTable,'MMC_Train','descend');
    otherwise
        error(['Performance metric "', selMethod,'" not recognized'])
end

featsel_graph;

save([fsave_featSel 'parameters'],'vars','selMethod','selBeta','maxFeatures');
save([fsave_featSel 'results_rankedTable'],'featSelAnTable');

varsSel = featSelAnTable{1,1}; varsSel = varsSel{1};

featSelAnTable = varsTable2charTable(featSelAnTable);

featsel_printEnd;

clear featSelAnTable featSelAn cel cend cstart

%% Análise de hiperparâmetros

fsave_analysisML = [fsave,'analise_hyperparameterML\'];

mkdir(fsave_analysisML);

cstart = clock;

analysisML_printStart;

switch methodSt
    case 'logReg'
        analysisML_logreg;
    case 'tree'
        analysisML_tree;
    case 'SVM'
        analysisML_SVM;
    case 'KNN'
        analysisML_KNN;
end

cend = clock;
cel = etime(cend,cstart); cdur(1) = floor(cel/(3600)); cdur(2) = floor(rem(cel,(3600))/60); cdur(3) = rem(cel,60);

analysisMLAn = reshape(analysisMLAn,[],1);
analysisMLAn(isnan([analysisMLAn(:).ROC_AUC_Train]')) = [];
analysisMLAnTable = struct2table(analysisMLAn);

save([fsave_analysisML 'results_rawMatrix'],'analysisMLAn');

analysisML_graph;

switch selMethod % Rankeia os resultados pela métrica selecionada
    case 'ROC_AUC'
        analysisMLAnTable = sortrows(analysisMLAnTable,'ROC_AUC_Train','descend');
    case 'Fbeta'
        analysisMLAnTable = sortrows(analysisMLAnTable,'fselBeta_Train','descend');
    case 'MCC'
        analysisMLAnTable = sortrows(analysisMLAnTable,'MMC_Train','descend');
    otherwise
        error(['Performance metric "', selMethod,'" not recognized'])
end

save([fsave_analysisML 'parameters'],'selMethod','selBeta','methodML','paramMLBusca');
save([fsave_analysisML 'results_rankedTable'],'analysisMLAnTable');

analysisML_printEnd;

clear featSelAnTable featSelAn cel cend cstart

fclose(fid);